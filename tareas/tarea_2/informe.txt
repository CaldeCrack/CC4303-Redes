- Tarea 2
Estudiante: Andrés Calderón Guardia

(las tablas en este archivo no se ven muy bien si no se visualizan con una fuente monoespaciada, por lo que recomiendo leer este informe en una terminal)

La experimentación se realizó en una maquina virtual con 4 cores y 4.440MB de RAM con sistema operativo Debian 12, utilizando siempre un archivo de 500MB, que corresponde al tamaño de archivo grande utilizado en la tarea 1, de modo que se puedan comparar estos resultados con los de la tarea anterior para el caso en que se enviaba solamente un archivo grande.

1.
Realizando la experimentación con anakena se obtuvieron los siguientes resultados para distintos parámetros:
+------------+------------+--------------+--------------+------------+
| Pack Size  | Max Window | Sndr Errors  | Recv Errors  | Time       |
+------------+------------+--------------+--------------+------------+
| 8.000      | 5.000      | 346.443      | 65.171       | 2m36.195s  |
|            | 1.000      | 228.704      | 63.031       | 2m47.169s  |
+------------+------------+--------------+--------------+------------+
| 10.000     | 1.000      | 109.803      | 50.250       | 2m12.640s  |
|            | 500        | 81.897       | 49.418       | 2m12.248s  |
+------------+------------+--------------+--------------+------------+
| 20.000     | 500        | 59.045       | 25.006       | 2m18.205s  |
|            | 200        | 35.149       | 23.246       | 2m33.009s  |
+------------+------------+--------------+--------------+------------+

En base a los resultados obtenidos nos quedamos con un tamaño de paquete de 10k bytes y una ventana de tamaño 500, aunque en la práctica apenas hubo diferencia al utilizar una ventana de tamaño 1k para tal caso.

2.
Los resultados de la tarea 1 se muestran a continuación (solo se muestra los mejores tiempos obtenidos con anakena al enviar 1 paquete de gran tamaño para realizar una buena comparación):
- server_echo2.py: 0m59.778s
- server_echo4.py: 0m36.173s
- server_echo5.py: 1m4.213s

En base a los resultados previos notamos que los tiempos obtenidos son menores a los logrados en la experimentación de esta tarea, esto puede ser debido a que el protocolo UDP, pese a ser más rápido en la práctica, tiene una tendencia a perder muchos paquetes, por lo que las retransmisiones generan suficiente sobrecosto como para que haya congestión en el enlace, provocando finalmente la demora en comparación a que si se utiliza el protocolo TCP de la primera tarea.

3.
Dado que solamente se realizó Selective-Repeat compararemos los tiempos entre localhost y anakena. En particular, en los siguientes resultados se evidencia que para todos los casos localhost es más rápido, sin embargo, no se libra de poseer errores de envío ni de recepción durante la ejecución.
+------------+------------+--------------+--------------+------------+
| Pack Size  | Max Window | Sndr Errors  | Recv Errors  | Time       |
+------------+------------+--------------+--------------+------------+
| 8.000      | 5.000      | 927          | 1.914        | 0m0.710s   |
|            | 1.000      | 1.145        | 1.931        | 0m0.0502   |
+------------+------------+--------------+--------------+------------+
| 10.000     | 1.000      | 1.102        | 1.510        | 0m2.348s   |
|            | 500        | 1.275        | 1.525        | 0m2.470s   |
+------------+------------+--------------+--------------+------------+
| 20.000     | 500        | 3.927        | 629          | 0m0.757s   |
|            | 200        | 761          | 758          | 0m0.880s   |
+------------+------------+--------------+--------------+------------+

Estos resultados tienen sentido con la teoría dado que el timeout adaptativo se reduce drásticamente al estar transmitiendo paquetes por localhost, además de reducir considerablemente las retransmisiones dado que se producen muchos menos errores en comparación a cuando se utiliza una red online como lo es anakena.

4.
Sí, esto puede ocurrir porque el RTT no es constante, y puede variar considerablemente debido a factores como la congestión de la red, las fluctuaciones en el ancho de banda y los retrasos intermitentes en la transmisión de los paquetes. En particular puede ocurrir que el RTT aumente repentinamente debido a congestión u otros factores, por lo que el valor del timeout calculado con el último RTT puede ser insuficiente para manejar este imprevisto.

5.
Una combinación de los todos parámetros ajustables es lo que proporciona un comportamiento eficiente, ya que sin importar el protocolo utilizado solo se puede aprovechar el rendimiento de este al usar valores adecuados. Si hay que elegir, me quedaría con el protocolo, dado que este es el que puede aprovechar los parámetros indicados en una mayor variedad de casos y el cual considero el mayor factor limitante a la hora de la eficiencia para un experimento como el que se realizó en esta tarea.

